{# MACROS #}
{% macro equality type concrete create createParams map mapParams %}{{ concrete }}.{{ create }}{{ createParams }}.{{ map }}{{ mapParams }}  == fidentity({{ concrete }}.{{ create }}{{ createParams }}){% endmacro %}


{% macro identityLaw type concrete create createParams map mapParams %}
    func test{{ type.name }}Functor{{ map|capitalize }}Identity() {
        property("{{ type.name }} - Functor Laws - {{ id|capitalize }}Identity") <- forAll { {{ type.annotations.testArgs }} in
            return {% if type|annotated:"needContext" %}({% call equality type concrete create createParams map mapParams %}).run(c){% else %}{% call equality type concrete create createParams map mapParams %}{% endif%}
        }
    }
{% endmacro %}

{# IMPLEMENTATION #}
import XCTest
@testable import FunctionalKit
import SwiftCheck
import Abstract

class LawsTests: XCTestCase {
{% for type in types.all|annotated:"functor" %}

//MARK: {{ type.name }}
{% if type|annotated:"map" %}{% call identityLaw type type.annotations.concrete type.annotations.create type.annotations.createParams type.annotations.map type.annotations.mapParams %}{% endif %}
{% if type|annotated:"mapLeft" %}{% call identityLaw type type.annotations.concrete type.annotations.createLeft type.annotations.createLeftParams type.annotations.mapLeft type.annotations.mapLeftParams %}{% endif %}
{% if type|annotated:"mapRight" %}{% call identityLaw type type.annotations.concrete type.annotations.createRight type.annotations.createRightParams type.annotations.mapRight type.annotations.mapRightParams %}{% endif %}
{% if type|annotated:"mapCenter" %}{% call identityLaw type type.annotations.concrete type.annotations.createCenter type.annotations.createCenterParams type.annotations.mapCenter type.annotations.mapCenterParams %}{% endif %}
{% if type|annotated:"mapFirst" %}{% call identityLaw type type.annotations.concrete type.annotations.createFirst type.annotations.createFirstParams type.annotations.mapFirst type.annotations.mapFirstParams %}{% endif %}
{% if type|annotated:"mapSecond" %}{% call identityLaw type type.annotations.concrete type.annotations.createSecond type.annotations.createSecondParams type.annotations.mapSecond type.annotations.mapSecondParams %}{% endif %}
{% if type|annotated:"mapBoth" %}{% call identityLaw type type.annotations.concrete type.annotations.createBoth type.annotations.createBothParams type.annotations.mapBoth type.annotations.mapBothParams %}{% endif %}

{% endfor %}

}
