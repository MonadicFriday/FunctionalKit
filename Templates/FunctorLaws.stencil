{% macro forAllParameters type %}(x: {% ifnot type|annotated:"swiftCheckTypeOf"%}{% ifnot type|annotated:"arrowOf"%}Int{% else %}ArrowOf<Int,Int>{% endif %}{% else %}{{ type.name }}Of<Int>{% endif %}{% if type|annotated:"needContext" %}, context: Int{% endif %}){% endmacro %}

{% macro valueOfType type %}{% ifnot type|annotated:"swiftCheckTypeOf"%}{% ifnot type|annotated:"arrowOf" %}{{ type.name }}.unfold({ $0(x) }){% else %}{{ type.name }}.init(x.getArrow){% endif %}{% else %}x.get{{ type.name }}{% endif %}{% endmacro %}

{% macro equal type %}{% call valueOfType type %}.map(fidentity) == fidentity({% call valueOfType type %}){% endmacro %}

import XCTest
@testable import FunctionalKit
import SwiftCheck

class FunctorLawsTests: XCTestCase {

{% for type in types.all|annotated:"functor" %}

//MARK: {{ type.name }}

{% if type|annotated:"simpleMap" %}
// Identity Law
    func test{{ type.name }}Identity() {
        property("{{ type.name }} - Functor Laws - Identity") <- forAll { {% call forAllParameters type %} in
            return {% if type|annotated:"needContext"%}({% call equal type %}).run(context){% else %}{% call equal type %}{% endif %}
        }
    }
{% endif %}

{% if type|annotated:"left" %}
// Left Identity Law
    func test{{ type.name }}LeftIdentity() {
        property("{{ type.name }} - Functor Laws - Left Identity") <- forAll { {% call forAllParameters type %} in
            return {{ type.name }}<Int,Int>.left(x).mapLeft(fidentity) == fidentity({{ type.name }}<Int,Int>.left(x))
        }
    }
{% endif %}

{% if type|annotated:"right" %}
    func test{{ type.name }}RightIdentity() {
        property("{{ type.name }} - Functor Laws - Right Identity") <- forAll { {% call forAllParameters type %} in
            return {{ type.name }}<Int,Int>.right(x).mapLeft(fidentity) == fidentity({{ type.name }}<Int,Int>.right(x))
        }
    }
{% endif %}

{% endfor %}
}
